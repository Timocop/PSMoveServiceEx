//
// PSMoveProtocol.proto: protobuf definition file for the PSMove Service Protocol
//
// Brendan Walker (brendan@millerwalker.net)
//
syntax = "proto3";
package PSMoveProtocol;

enum ControllerType {
    PSMOVE= 0;
    PSNAVI= 1;
    PSDUALSHOCK4= 2;
    VIRTUALCONTROLLER= 3;
}

enum ControllerHand {
    HAND_ANY= 0;
    HAND_LEFT= 1;
    HAND_RIGHT= 2;
}

message Pixel {
    float x = 1;
    float y = 2;
}

message FloatVector {
    float i = 1;
    float j = 2;
    float k = 3;
}

message IntVector {
    int32 i = 1;
    int32 j = 2;
    int32 k = 3;
}

message Position {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Euler {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Orientation{
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message Ellipse
{
    Pixel center = 1;
    float half_x_extent = 2;
    float half_y_extent = 3;
    float angle = 4;
}

message Polygon
{
    repeated Pixel vertices = 1;
}

message OptionSet {
	string option_name = 1;
	repeated string option_strings = 2;
	int32 option_index = 3;
}

message Pose {
    Orientation orientation= 1;
    Position position= 2;
}

message ProjectionBlacklistList {
	ProjectionBlacklist _1 = 1;
	ProjectionBlacklist _2 = 2;
	ProjectionBlacklist _3 = 3;
	ProjectionBlacklist _4 = 4;
	ProjectionBlacklist _5 = 5;
}

message ProjectionBlacklist {
	float x = 1;
	float y = 2;
	float w = 3;
	float h = 4;
}

enum TrackerType {
    PS3EYE = 0;
}

enum TrackerDriver {
    LIBUSB = 0;
    CL_EYE = 1;
    CL_EYE_MULTICAM = 2;
    GENERIC_WEBCAM = 3;
}

enum TrackingColorType {
    Magenta = 0;
    Cyan = 1;
    Yellow = 2;
    Red = 3;
    Green = 4;
    Blue = 5;
	Custom0 = 6;
	Custom1 = 7;
	Custom2 = 8;
	Custom3 = 9;
	Custom4 = 10;
	Custom5 = 11;
	Custom6 = 12;
	Custom7 = 13;
	Custom8 = 14;
	Custom9 = 15;
    MAX_PSMOVE_COLOR_PRESETS = 16;
};

message TrackingColorPreset {
    TrackingColorType color_type = 1;
    float hue_center = 2;
    float hue_range = 3;
    float saturation_center = 4;
    float saturation_range = 5;
    float value_center = 6;
    float value_range = 7;
}

enum HMDType {
    Morpheus = 0;
    VirtualHMD = 1;
}

// Reliable (TCP) requests that can issued to the PSMove Service
message Request {
    // Unique id for this request.
    // Used to keep track of which response is associated with which request
    // when multiple requests are in-flight.
    int32 request_id = 1;

    // The request type determines which of the request structures is actually used
    enum RequestType {
        GET_CONTROLLER_LIST = 0;
        START_CONTROLLER_DATA_STREAM = 1;
        STOP_CONTROLLER_DATA_STREAM = 2;
        RESET_ORIENTATION = 3;
        UNPAIR_CONTROLLER= 4;
        PAIR_CONTROLLER= 5;
        CANCEL_BLUETOOTH_REQUEST= 6;
        SET_LED_TRACKING_COLOR= 7;
        SET_CONTROLLER_MAGNETOMETER_CALIBRATION= 8;
        SET_CONTROLLER_ACCELEROMETER_CALIBRATION= 9;
        SET_CONTROLLER_GYROSCOPE_CALIBRATION= 10;
        SET_OPTICAL_NOISE_CALIBRATION= 11;
        SET_ORIENTATION_FILTER= 12;
        SET_POSITION_FILTER= 13;
        SET_CONTROLLER_PREDICTION_TIME= 14;
        SET_ATTACHED_CONTROLLER= 15;
        SET_GAMEPAD_INDEX= 16;
        SET_CONTROLLER_DATA_STREAM_TRACKER_INDEX = 17;
		SET_CONTROLLER_HAND = 18;

        GET_TRACKER_LIST = 19;
        START_TRACKER_DATA_STREAM = 20;
        STOP_TRACKER_DATA_STREAM = 21;
        GET_TRACKER_SETTINGS = 22;
        SET_TRACKER_EXPOSURE = 23;
        SET_TRACKER_GAIN = 24;
        SET_TRACKER_OPTION = 25;
        SET_TRACKER_COLOR_PRESET = 26;
        SET_TRACKER_POSE = 27;
        SET_TRACKER_INTRINSICS = 28;
        RELOAD_TRACKER_SETTINGS = 29;
        SAVE_TRACKER_PROFILE = 30;
        APPLY_TRACKER_PROFILE = 31;
        SEARCH_FOR_NEW_TRACKERS = 32;
        GET_TRACKING_SPACE_SETTINGS = 33;

        GET_HMD_LIST = 34;
        START_HMD_DATA_STREAM = 35;
        STOP_HMD_DATA_STREAM = 36;
        SET_HMD_LED_TRACKING_COLOR= 37;
        SET_HMD_ACCELEROMETER_CALIBRATION= 38;
        SET_HMD_GYROSCOPE_CALIBRATION= 39;
        SET_HMD_PREDICTION_TIME= 40;
        SET_HMD_ORIENTATION_FILTER= 41;
        SET_HMD_POSITION_FILTER= 42;        
        SET_HMD_DATA_STREAM_TRACKER_INDEX = 43;

        GET_SERVICE_VERSION= 44;

        SET_TRACKER_FRAME_RATE = 45;
        SET_TRACKER_FRAME_WIDTH = 46;
        SET_TRACKER_FRAME_HEIGHT = 47;
		
		// PSMoveServiceEx

		SET_CONTROLLER_OPTICAL_TRACKING = 48;
		SET_CONTROLLER_PSMOVE_EMULATION = 49;
		SET_TRACKER_PROJECTIONBLACKLIST = 50;
		SET_CONTROLLER_OFFSETS = 51;
		SET_HMD_OFFSETS = 52;
		GET_PLAYSPACE_OFFSETS = 53;
		SET_PLAYSPACE_OFFSETS = 54;
		SET_CONTROLLER_FILTER_SETTINGS = 55;
		SET_HMD_FILTER_SETTINGS = 56;
        SET_CONTROLLER_MAGNETOMETER_CALIBRATION_BASIC= 57;
        SET_CONTROLLER_ANG_PREDICTION_TIME= 58;
        SET_HMD_ANG_PREDICTION_TIME= 59;
    }
    RequestType type = 2;

    message RequestGetControllerList {
        bool include_usb_controllers = 1;
    }
    RequestGetControllerList request_get_controller_list = 3;

    // Parameters for START_CONTROLLER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will start streaming to client upon receiving this request
    message RequestStartPSMoveDataStream {
        int32 controller_id = 1;
        bool include_position_data = 2;
        bool include_physics_data= 3;
        bool include_raw_sensor_data= 4;
        bool include_calibrated_sensor_data= 5;
        bool include_raw_tracker_data= 6;
        bool disable_roi= 7;
    }
    RequestStartPSMoveDataStream request_start_psmove_data_stream = 4;

    // Parameters for STOP_PSMOVE_DATA_STREAM
    // NOTE: DeviceDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopPSMoveDataStream {
        int32 controller_id = 1;
    }
    RequestStopPSMoveDataStream request_stop_psmove_data_stream = 5;

    // Parameters for RESET_ORIENTATION
    message RequestResetPose {
        int32 controller_id = 1;
        Orientation orientation= 2;
    }
    RequestResetPose reset_orientation = 7;

    // Parameters for UNPAIR_CONTROLLER
    message RequestUnpairController {
        int32 controller_id = 1;
    }
    RequestUnpairController unpair_controller = 8;

    // Parameters for PAIR_CONTROLLER
    message RequestPairController {
        int32 controller_id = 1;
    }
    RequestPairController pair_controller = 9;

    // Parameters for CANCEL_BLUETOOTH_REQUEST
    message RequestCancelBluetoothRequest {
        int32 controller_id = 1;
    }
    RequestCancelBluetoothRequest cancel_bluetooth_request = 10;

    // Parameters for SET_LED_TRACKING_COLOR
    message RequestSetLEDTrackingColor {
        int32 controller_id = 1;
        TrackingColorType color_type = 2;
    }
    RequestSetLEDTrackingColor set_led_tracking_color_request = 12;

    // Parameters for SET_CONTROLLER_MAGNETOMETER_CALIBRATION
    message RequestSetControllerMagnetometerCalibration {
        int32 controller_id = 1;
        FloatVector ellipse_center= 2;
        FloatVector ellipse_extents= 3;
        FloatVector ellipse_basis_x= 4;
        FloatVector ellipse_basis_y= 5;
        FloatVector ellipse_basis_z= 6;
        float ellipse_fit_error= 7;
        FloatVector magnetometer_identity= 8;
        float magnetometer_variance= 9;
    }
    RequestSetControllerMagnetometerCalibration set_controller_magnetometer_calibration_request = 13;

    // Parameters for SET_CONTROLLER_ACCELEROMETER_CALIBRATION
    message RequestSetControllerAccelerometerCalibration {
        int32 controller_id = 1;
        float noise_radius= 2;
        float variance= 3;
    }
    RequestSetControllerAccelerometerCalibration set_controller_accelerometer_calibration_request = 14;

    // Parameters for SET_CONTROLLER_GYROSCOPE_CALIBRATION
    message RequestSetControllerGyroscopeCalibration {
        int32 controller_id = 1;
		FloatVector raw_bias= 2;
        float variance= 3;
        float drift= 4;
        string gyro_gain_setting= 5;
    }
    RequestSetControllerGyroscopeCalibration set_controller_gyroscope_calibration_request = 15;
	
    // Parameters for SET_OPTICAL_NOISE_CALIBRATION
    message RequestSetOpticalNoiseCalibration {
        int32 controller_id = 1;
        // Variance(cm^2) in position as a function of pixel projection area
        float position_variance_exp_fit_a = 2;
        float position_variance_exp_fit_b = 3;
        // Variance(rad^2) in orientation as a function of pixel projection area
        float orientation_variance_exp_fit_a = 4;
        float orientation_variance_exp_fit_b = 5;
    }
    RequestSetOpticalNoiseCalibration request_set_optical_noise_calibration = 16;

    // Parameters for SET_ORIENTATION_FILTER
    message RequestSetOrientationFilter {
        int32 controller_id = 1;
        string orientation_filter = 2;
    }
    RequestSetOrientationFilter request_set_orientation_filter = 17;

    // Parameters for SET_POSITION_FILTER
    message RequestSetPositionFilter {
        int32 controller_id = 1;
        string position_filter = 2;
    }
    RequestSetPositionFilter request_set_position_filter = 18;

    // Parameters for SET_CONTROLLER_PREDICTION_TIME
    message RequestSetControllerPredictionTime {
        int32 controller_id = 1;
        float prediction_time = 2;
    }
    RequestSetControllerPredictionTime request_set_controller_prediction_time = 19;

    // Parameters for SET_ATTACHED_CONTROLLER
    message RequestSetAttachedController {
        int32 child_controller_id = 1;
        int32 parent_controller_id = 2;
    }
    RequestSetAttachedController request_set_attached_controller = 20;
    
    // Parameters for SET_GAMEPAD_INDEX
    message RequestSetGamepadIndex {
        int32 controller_id = 1;
        int32 gamepad_index = 2;
    }
    RequestSetGamepadIndex request_set_gamepad_index = 21;
    
    // Parameters for SET_CONTROLLER_DATA_STREAM_TRACKER_INDEX
    message RequestSetControllerDataStreamTrackerIndex {
        int32 controller_id = 1;
        int32 tracker_id = 2;
    }
    RequestSetControllerDataStreamTrackerIndex request_set_controller_data_stream_tracker_index = 22;
	
	// Parameters for SET_CONTROLLER_HAND
    message RequestSetControllerHand {
        int32 controller_id = 1;
        ControllerHand controller_hand = 2;
    }
    RequestSetControllerHand request_set_controller_hand = 23;
    
    // Parameters for START_TRACKER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will start streaming to client upon receiving this request
    message RequestStartTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStartTrackerDataStream request_start_tracker_data_stream = 24;

    // Parameters for STOP_TRACKER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStopTrackerDataStream request_stop_tracker_data_stream = 25;

    // Parameters for GET_TRACKER_SETTINGS
    message RequestGetTrackerSettings {
        int32 tracker_id = 1;
        int32 device_id = 2;
        enum DeviceCategory
        {
            CONTROLLER= 0;
            HMD= 1;
        }
        DeviceCategory device_category= 3;
    }
    RequestGetTrackerSettings request_get_tracker_settings = 26;

    // Parameters for SET_TRACKER_EXPOSURE
    message RequestSetTrackerExposure {
        int32 tracker_id = 1;
        float value = 2;
        bool save_setting= 3;
    }
    RequestSetTrackerExposure request_set_tracker_exposure = 27;

    // Parameters for SET_TRACKER_GAIN
    message RequestSetTrackerGain {
        int32 tracker_id = 1;
        float value = 2;
        bool save_setting= 3;
    }
    RequestSetTrackerGain request_set_tracker_gain = 28;

    // Parameters for SET_TRACKER_OPTION
    message RequestSetTrackerOption {
        int32 tracker_id = 1;
        string option_name = 2;
        int32 option_index = 3;
    }
    RequestSetTrackerOption request_set_tracker_option = 29;

    // Parameters for SET_TRACKER_COLOR_PRESET
    message RequestSetTrackerColorPreset {
        int32 tracker_id = 1;
        int32 device_id = 2;
        enum DeviceCategory
        {
            CONTROLLER= 0;
            HMD= 1;
        }
        DeviceCategory device_category= 3;

        TrackingColorPreset color_preset = 4;
    }
    RequestSetTrackerColorPreset request_set_tracker_color_preset = 30;

    // Parameters for SET_TRACKER_INTRINSICS
    message RequestSetTrackerIntrinsics {
        int32 tracker_id = 1;
        Pixel tracker_focal_lengths = 2;
        Pixel tracker_principal_point = 3;
        float tracker_k1= 4;
        float tracker_k2= 5;
        float tracker_k3= 6;
        float tracker_p1= 7;
        float tracker_p2= 8;
    }
    RequestSetTrackerIntrinsics request_set_tracker_intrinsics = 31;

    // Parameters for SET_TRACKER_POSE
    message RequestSetTrackerPose {
        int32 tracker_id = 1;
        Pose pose = 2;
    }
    RequestSetTrackerPose request_set_tracker_pose = 32;

    // Parameters for RELOAD_TRACKER_SETTINGS
    message RequestReloadTrackerSettings {
      int32 tracker_id = 1;
    }
    RequestReloadTrackerSettings request_reload_tracker_settings = 33;

    // Parameters for SAVE_TRACKER_PROFILE
    message RequestSaveTrackerProfile {
        int32 tracker_id = 1;
        int32 controller_id = 2;
    }
    RequestSaveTrackerProfile request_save_tracker_profile = 34;

    // Parameters for APPLY_TRACKER_PROFILE
    message RequestApplyTrackerProfile {
        int32 tracker_id = 1;
        int32 controller_id = 2;
    }
    RequestApplyTrackerProfile request_apply_tracker_profile = 35;

    // No Parameters for SEARCH_FOR_NEW_TRACKERS

    // Parameters for START_HMD_DATA_STREAM
    // NOTE: DeviceDataFrame packets will start streaming to client upon receiving this request
    message RequestStartHmdDataStream {
        int32 hmd_id = 1;
        bool include_position_data = 2;
        bool include_physics_data= 3;
        bool include_raw_sensor_data= 4;
        bool include_calibrated_sensor_data= 5;
        bool include_raw_tracker_data= 6;
        bool disable_roi= 7;
    }
    RequestStartHmdDataStream request_start_hmd_data_stream = 36;

    // Parameters for STOP_HMD_DATA_STREAM
    // NOTE: DeviceDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopHmdDataStream {
        int32 hmd_id = 1;
    }
    RequestStopHmdDataStream request_stop_hmd_data_stream = 37;

    // Parameters for SET_HMD_LED_TRACKING_COLOR
    message RequestSetHmdLEDTrackingColor {
        int32 hmd_id = 1;
        TrackingColorType color_type = 2;
    }
    RequestSetHmdLEDTrackingColor set_hmd_led_tracking_color_request = 38;    
    
    // Parameters for SET_HMD_ACCELEROMETER_CALIBRATION
    message RequestSetHMDAccelerometerCalibration {
        int32 hmd_id = 1;
        FloatVector raw_average_gravity= 2;
        float raw_variance= 3;
    }
    RequestSetHMDAccelerometerCalibration set_hmd_accelerometer_calibration_request = 39;

    // Parameters for SET_HMD_GYROSCOPE_CALIBRATION
    message RequestSetHMDGyroscopeCalibration {
        int32 hmd_id = 1;
        FloatVector raw_bias= 2;
        float raw_variance= 3;
        float raw_drift= 4;
    }
    RequestSetHMDGyroscopeCalibration set_hmd_gyroscope_calibration_request = 40;

    // No parameters for GET_TRACKING_SPACE_SETTINGS

    // Parameters for SET_HMD_ORIENTATION_FILTER
    message RequestSetHMDOrientationFilter {
        int32 hmd_id = 1;
        string orientation_filter = 2;
    }
    RequestSetHMDOrientationFilter request_set_hmd_orientation_filter = 41;

    // Parameters for SET_HMD_POSITION_FILTER
    message RequestSetHMDPositionFilter {
        int32 hmd_id = 1;
        string position_filter = 2;
    }
    RequestSetHMDPositionFilter request_set_hmd_position_filter = 42;
    
    // Parameters for SET_HMD_PREDICTION_TIME
    message RequestSetHMDPredictionTime {
        int32 hmd_id = 1;
        float prediction_time = 2;
    }
    RequestSetHMDPredictionTime request_set_hmd_prediction_time = 43;
    
    // Parameters for SET_HMD_DATA_STREAM_TRACKER_INDEX
    message RequestSetHMDDataStreamTrackerIndex {
        int32 hmd_id = 1;
        int32 tracker_id = 2;
    }
    RequestSetHMDDataStreamTrackerIndex request_set_hmd_data_stream_tracker_index = 44;        

    // Parameters for SET_TRACKER_FRAME_RATE
    message RequestSetTrackerFrameRate {
        int32 tracker_id = 1;
        float value = 2;
        bool save_setting= 3;
    }
    RequestSetTrackerFrameRate request_set_tracker_frame_rate = 45;

    // Parameters for SET_TRACKER_FRAME_WIDTH
    message RequestSetTrackerFrameWidth {
        int32 tracker_id = 1;
        float value = 2;
        bool save_setting= 3;
    }
    RequestSetTrackerFrameWidth request_set_tracker_frame_width = 46;

    // Parameters for SET_TRACKER_FRAME_HEIGHT
    message RequestSetTrackerFrameHeight {
        int32 tracker_id = 1;
        float value = 2;
        bool save_setting= 3;
    }
    RequestSetTrackerFrameHeight request_set_tracker_frame_height = 47;    
	

	// PSMoveServiceEx

    // Parameters for SET_CONTROLLER_OPTICAL_TRACKING
    message RequestSetControllerOpticalTracking {
        int32 controller_id = 1;
        bool enabled = 2;
    }
    RequestSetControllerOpticalTracking request_set_controller_optical_tracking = 48;
	
    // Parameters for SET_CONTROLLER_PSMOVE_EMULATION
    message RequestSetControllerPSmoveEmulation {
        int32 controller_id = 1;
        bool enabled = 2;
    }
    RequestSetControllerPSmoveEmulation request_set_controller_psmove_emulation = 49;

    // Parameters for SET_TRACKER_PROJECTIONBLACKLIST
    message RequestSetTrackerProjectionBlacklist {
        int32 tracker_id = 1;
        ProjectionBlacklistList projection_blacklist = 2;
    }
    RequestSetTrackerProjectionBlacklist request_set_tracker_projection_blacklist = 50;
	
    // Parameters for SET_CONTROLLER_OFFSETS
    message RequestSetControllerOffsets {
        int32 controller_id = 1;
        Position offset_position = 2;
        Euler offset_orientation = 3;
        Euler offset_world_orientation = 4;
        Position offset_scale = 5;
		float offset_magnetometer = 6;
    }
    RequestSetControllerOffsets request_set_controller_offsets = 51;
	
    // Parameters for SET_HMD_OFFSETS
    message RequestSetHMDOffsets {
        int32 hmd_id = 1;
        Position offset_position = 2;
        Euler offset_orientation = 3;
        Euler offset_world_orientation = 4;
        Position offset_scale = 5;
    }
    RequestSetHMDOffsets request_set_hmd_offsets = 52;
	
    // Parameters for GET_PLAYSPACE_OFFSETS
    message RequestGetPlayspaceOffsets {
		float playspace_orientation_yaw = 1;
		Position playspace_position= 2;
		Position playspace_scale= 3;
    }
    RequestGetPlayspaceOffsets request_get_playspace_offsets = 53;
	
    // Parameters for SET_PLAYSPACE_OFFSETS
    message RequestSetPlayspaceOffsets {
		float playspace_orientation_yaw = 1;
		Position playspace_position= 2;
		Position playspace_scale= 3;
    }
    RequestSetPlayspaceOffsets request_set_playspace_offsets = 54;
	
    // Parameters for SET_CONTROLLER_FILTER_SETTINGS
    message RequestSetControllerFilterSettings {
        int32 controller_id = 1;
		float filter_lowpassoptical_smoothing = 2;
		float filter_lowpassoptical_distance = 3;
		bool filter_enable_magnetometer = 4;
		bool filter_use_passive_drift_correction = 5;
		int32 filter_passive_drift_correction_method = 6;
		float filter_passive_drift_correction_deadzone = 7;
		float filter_passive_drift_correction_gravity_deadzone = 8;
		float filter_passive_drift_correction_delay = 9;
		int32 filter_opticaltarget_controller_id = 10;
		bool filter_use_stabilization = 11;
		float filter_stabilization_min_scale = 12;
		float filter_madgwick_beta = 13;
		bool filter_madgwick_stabilization = 14;
    }
    RequestSetControllerFilterSettings request_set_controller_filter_settings = 55;
	
    // Parameters for SET_HMD_FILTER_SETTINGS
    message RequestSetHmdFilterSettings {
        int32 hmd_id = 1;
		float filter_lowpassoptical_smoothing = 2;
		float filter_lowpassoptical_distance = 3;
		float filter_madgwick_beta = 4;
		bool filter_madgwick_stabilization = 5;
    }
    RequestSetHmdFilterSettings request_set_hmd_filter_settings = 56;
	
    // Parameters for SET_CONTROLLER_MAGNETOMETER_CALIBRATION_BASIC
    message RequestSetControllerMagnetometerCalibrationBasic {
        int32 controller_id = 1;
        FloatVector ellipse_center= 2;
        FloatVector ellipse_extents= 3;
        FloatVector ellipse_basis_x= 4;
        FloatVector ellipse_basis_y= 5;
        FloatVector ellipse_basis_z= 6;
        float ellipse_fit_error= 7;
    }
    RequestSetControllerMagnetometerCalibrationBasic set_controller_magnetometer_calibration_basic_request = 57;
	
    // Parameters for SET_CONTROLLER_ANG_PREDICTION_TIME
    message RequestSetControllerOrientationPredictionTime {
        int32 controller_id = 1;
        float ang_prediction_time = 2;
    }
    RequestSetControllerOrientationPredictionTime request_set_controller_orientation_prediction_time = 58;
	
    // Parameters for SET_HMD_ANG_PREDICTION_TIME
    message RequestSetHmdOrientationPredictionTime {
        int32 hmd_id = 1;
        float ang_prediction_time = 2;
    }
    RequestSetHmdOrientationPredictionTime request_set_hmd_orientation_prediction_time = 59;

}

// Reliable (TCP) responses to requests
message Response {
    // The response type
    enum ResponseType {
        GENERAL_RESULT= 0;
        CONNECTION_INFO= 1;
        CONTROLLER_LIST= 2;
        CONTROLLER_STREAM_STARTED= 3;
        CONTROLLER_LIST_UPDATED= 4;
        UNPAIR_REQUEST_COMPLETED= 5;
        PAIR_REQUEST_COMPLETED= 6;
        BLUETOOTH_REQUEST_PROGRESS= 7;
        TRACKER_LIST= 8;
        TRACKER_LIST_UPDATED= 9;
        TRACKER_SETTINGS= 10;
        TRACKER_EXPOSURE_UPDATED= 11;
        TRACKER_GAIN_UPDATED= 12;
        TRACKER_OPTION_UPDATED= 13;
        TRACKER_PRESET_UPDATED= 14;
        TRACKING_SPACE_SETTINGS= 15;
        HMD_LIST= 16;
        HMD_LIST_UPDATED= 17;
        SERVICE_VERSION= 18;
        TRACKER_FRAME_RATE_UPDATED= 19;
        TRACKER_FRAME_WIDTH_UPDATED= 20;
        TRACKER_FRAME_HEIGHT_UPDATED= 21;
        SYSTEM_BUTTON_PRESSED= 22;
		GET_PLAYSPACE_OFFSETS= 23;
		PLAYSPACE_OFFSET_UPDATE= 24;
    }

    enum ResultCode {
        RESULT_OK= 0;
        RESULT_ERROR= 1;
        RESULT_CANCELED= 2;
    }

    ResponseType type = 1;
    int32 request_id = 2; // the request id that spawned this response, -1 if this is a notification
    ResultCode result_code = 3;

    // No Parameters for GENERAL_RESULT

    // Parameters for CONNECTION_INFO
    // This is returned automatically when connecting via TCP
    message ResultConnectionInfo {
        int32 tcp_connection_id = 1;
    }
    ResultConnectionInfo result_connection_info = 20;

    // Parameters for CONTROLLER_STREAM_STARTED
    message ResultControllerStreamStarted {
        DeviceOutputDataFrame initial_data_frame= 1;
    }
    ResultControllerStreamStarted result_controller_stream_started= 21;

    // Parameters for CONTROLLER_LIST
    // This is returned in response to a GET_CONTROLLER_LIST request
    message ResultControllerList {
        message ControllerInfo {
            int32 controller_id= 1;
            enum ConnectionType {
                USB = 0;
                BLUETOOTH = 1;
            }
            ConnectionType connection_type = 2;
			ControllerType controller_type = 3;
			ControllerHand controller_hand = 4;
            TrackingColorType tracking_color_type = 5;
            string device_path = 6;
            string device_serial = 7;
            string assigned_host_serial = 8;
            string parent_controller_serial = 9;
            int32 firmware_version = 10;
            int32 firmware_revision = 11;
            bool has_magnetometer = 12;
            string orientation_filter = 13;
            string position_filter = 14;
            string gyro_gain_setting = 15;
            float prediction_time = 16;
            int32 gamepad_index = 17;
			
			// PSMoveServiceEx

			bool opticaltracking = 18;
			bool psmove_emulation = 19;
			
			Position offset_position = 20;
			Euler offset_orientation = 21;
			Euler offset_world_orientation = 22;
			Position offset_scale = 23;
			float offset_magnetometer = 24;
			
			float filter_lowpassoptical_smoothing = 25;
			float filter_lowpassoptical_distance = 26;
			
			bool filter_enable_magnetometer = 27;
			bool filter_use_passive_drift_correction = 28;
			int32 filter_passive_drift_correction_method = 29;
			float filter_passive_drift_correction_deadzone = 30;
			float filter_passive_drift_correction_gravity_deadzone = 31;
			float filter_passive_drift_correction_delay = 32;
			int32 filter_opticaltarget_controller_id = 33;
			bool filter_use_stabilization = 34;
			float filter_stabilization_min_scale = 35;
			
            float ang_prediction_time = 36;
			
			float filter_madgwick_beta = 37;
			bool filter_madgwick_stabilization = 38;
        }
        repeated ControllerInfo controllers = 1;
        string host_serial = 2;
        int32 gamepad_count = 3;
    }
    ResultControllerList result_controller_list = 22;

    // No parameters for CONTROLLER_LIST_UPDATED
    // No parameters for UNPAIR_REQUEST_COMPLETED
    // No parameters for PAIR_REQUEST_COMPLETED

    // Parameters for BLUETOOTH_REQUEST_PROGRESS
    message ResultBluetoothRequestProgress {
        int32 controller_id = 1;
        int32 steps_completed = 2;
        int32 total_steps = 3;
    }
    ResultBluetoothRequestProgress result_bluetooth_request_progress = 23;

    // Parameters for TRACKER_LIST
    // This is returned in response to a GET_TRACKER_LIST request
    message ResultTrackerList {
        message TrackerInfo {
            // ID of the tracker in the service
            int32 tracker_id= 1;

            // Tracker USB Properties
            TrackerType tracker_type = 2;
            TrackerDriver tracker_driver = 3;
            string device_path = 4;

            // Video Stream Properties
            string shared_memory_name = 5;

            // Camera Intrinsic Properties
            Pixel tracker_focal_lengths = 6;
            Pixel tracker_principal_point = 7;
            Pixel tracker_screen_dimensions = 8;
            float tracker_hfov = 9;
            float tracker_vfov = 10;
            float tracker_znear = 11;
            float tracker_zfar = 12;
            float tracker_k1= 13;
            float tracker_k2= 14;
            float tracker_k3= 15;
            float tracker_p1= 16;
            float tracker_p2= 17;

            // Camera Extrinsic Properties
            Pose tracker_pose = 18;
        }
        repeated TrackerInfo trackers = 1;
        float global_forward_degrees = 2;
    }
    ResultTrackerList result_tracker_list = 24;

    // This is returned in response to a GET_TRACKER_SETTINGS or APPLY_TRACKER_PROFILE request
    message ResultTrackerSettings {
        float exposure= 1;
        float gain= 2;
        repeated OptionSet option_sets= 3;
        repeated TrackingColorPreset color_presets = 4;
        float frame_rate= 5;
        float frame_width= 6;
        float frame_height= 7;
			
		// Tracker Projection Blacklist
		ProjectionBlacklistList projection_blacklist = 8;
    }
    ResultTrackerSettings result_tracker_settings = 25;

    // This is returned in response to a SET_TRACKER_EXPOSURE request
    message ResultSetTrackerExposure {
        float new_exposure= 1;
    }
    ResultSetTrackerExposure result_set_tracker_exposure = 26;

    // This is returned in response to a SET_TRACKER_GAIN request
    message ResultSetTrackerGain {
        float new_gain= 1;
    }
    ResultSetTrackerGain result_set_tracker_gain = 27;

    // This is returned in response to a SET_TRACKER_OPTION request
    message ResultSetTrackerOption {
        string option_name = 1;
        int32 new_option_index = 2;
    }
    ResultSetTrackerOption result_set_tracker_option = 28;

    // This is returned in response to a SET_TRACKER_COLOR_PRESET request
    message ResultSetTrackerColorPreset {
        int32 tracker_id = 1;
        TrackingColorPreset new_color_preset = 2;
    }
    ResultSetTrackerColorPreset result_set_tracker_color_preset = 29;

    // This is returned in response to a GET_TRACKING_SPACE_SETTINGS request
    message ResultTrackingSpaceSettings
    {
        float global_forward_degrees = 1;
    }
    ResultTrackingSpaceSettings result_tracking_space_settings = 30;

    // No parameters for HMD_LIST_UPDATED

    // Parameters for HMD_LIST
    // This is returned in response to a HMD_LIST request
    message ResultHMDList {
        message HMDInfo {
            int32 hmd_id= 1;
            HMDType hmd_type = 2;
            TrackingColorType tracking_color_type = 3;
            string device_path = 4;
            string orientation_filter = 5;
            string position_filter = 6;
            float prediction_time = 7;
			
			// PSMoveServiceEx
			
			Euler offset_orientation = 8;
			Euler offset_world_orientation = 9;
			Position offset_position = 10;
			Position offset_scale = 11;
			
			float filter_lowpassoptical_smoothing = 12;
			float filter_lowpassoptical_distance = 13;
			
            float ang_prediction_time = 14;
			
			float filter_madgwick_beta = 15;
			bool filter_madgwick_stabilization = 16;
        }
        repeated HMDInfo hmd_entries = 1;
    }
    ResultHMDList result_hmd_list = 31;

    // Parameters for SERVICE_VERSION
    message ResultServiceVersion{
        string version= 1;
    }
    ResultServiceVersion result_service_version = 32;

    // This is returned in response to a SET_TRACKER_FRAME_RATE request
    message ResultSetTrackerFrameRate {
        float new_frame_rate= 1;
    }
    ResultSetTrackerFrameRate result_set_tracker_frame_rate = 33;

    // This is returned in response to a SET_TRACKER_FRAME_WIDTH request
    message ResultSetTrackerFrameWidth {
        float new_frame_width= 1;
    }
    ResultSetTrackerFrameWidth result_set_tracker_frame_width = 34;

    // This is returned in response to a SET_TRACKER_FRAME_HEIGHT request
    message ResultSetTrackerFrameHeight {
        float new_frame_height= 1;
    }
    ResultSetTrackerFrameHeight result_set_tracker_frame_height = 35;

    // This is returned in response to a GET_PLAYSPACE_OFFSETS or SET_PLAYSPACE_OFFSETS request
    message ResultGetPlayspaceOffsets {
        float playspace_orientation_yaw= 1;
		Position playspace_position= 2;
		Position playspace_scale= 3;
    }
    ResultGetPlayspaceOffsets result_get_playspace_offsets = 36;
}

// Unreliable (UDP) device data packet sent from service to clients
message DeviceOutputDataFrame
{
    // The device type
    enum DeviceCategory
    {
        CONTROLLER= 0;
        TRACKER= 1;
        HMD= 2;
    }
    DeviceCategory device_category= 1;

    // Update packet for a controller
    message ControllerDataPacket
    {
        // Button Index Bits
        enum ButtonType {
            TRIANGLE= 0;
            CIRCLE= 1;
            CROSS= 2;
            SQUARE= 3;
            SELECT= 4;
            START= 5;
            PS= 6;
            MOVE= 7;
            TRIGGER= 8;
            UP= 9;
            DOWN= 10;
            LEFT= 11;
            RIGHT= 12;
            L1= 13;
            L2= 14;
            L3= 15;
            R1= 16;
            R2= 17;
            R3= 18;
            SHARE= 19;
            OPTIONS= 20;
            TRACKPAD= 21;
        }

        // The id of controller this data is for
        int32 controller_id= 1;

        // Specify the type of controller this data is from
        ControllerType controller_type= 2;

        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // Common Controller status flags
        bool IsConnected= 4;

        // Raw bitmask of which buttons are currently down
        // Buttons bits are indexed using the ButtonType enum
        uint32 button_down_bitmask = 5;

        // PSMove Specific Controller state
        message PSMoveState
        {
            // PSMove Specific flags
            bool ValidHardwareCalibration= 1;
            bool IsTrackingEnabled= 2;
            bool IsCurrentlyTracking= 3;
            bool IsOrientationValid= 4;
            bool IsPositionValid= 5;

            // Tracking position in the space of the HMD tracking camera
            Position position_cm = 6;

            // Tracking orientation in the frame of the local magnetic field
            Orientation orientation = 7;

            // Trigger analog value [0,255]
            int32 trigger_value = 8;

            // Only valid if include_raw_sensor_data=true in START_CONTROLLER_DATA_STREAM request
            message RawSensorData
            {
                IntVector magnetometer= 1;
                IntVector accelerometer= 2;
                IntVector gyroscope= 3;
            }
            RawSensorData raw_sensor_data = 9;

            // Only valid if include_calibrated_sensor_data=true in START_CONTROLLER_DATA_STREAM request
            message CalibratedSensorData
            {
                FloatVector magnetometer= 1;
                FloatVector accelerometer= 2;
                FloatVector gyroscope= 3;
            }
            CalibratedSensorData calibrated_sensor_data = 10;

            // Only valid if include_raw_tracker_data=true in START_CONTROLLER_DATA_STREAM request
            message RawTrackerData
            {
                int32 tracker_id= 1;
                Pixel screen_location= 2;
                Position relative_position_cm= 3;
                Ellipse projected_sphere= 4;
                Position multicam_position_cm= 5;
                uint32 valid_tracker_bitmask = 6;
            }
            RawTrackerData raw_tracker_data = 11;

            // Only valid if include_physics_data=true in START_CONTROLLER_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity_cm_per_sec= 1;
                FloatVector acceleration_cm_per_sec_sqr= 2;
                FloatVector angular_velocity_rad_per_sec= 3;
                FloatVector angular_acceleration_rad_per_sec_sqr= 4;
            }
            PhysicsData physics_data = 12;

            // Battery charge state value [0,5;EE,EF]
            int32 battery_value = 13;
			int32 tracking_color_type = 14;
        }
        PSMoveState psmove_state = 6;

        // PSMove Specific Controller state
        message PSNaviState
        {
            // Trigger analog value [0,255]
            int32 trigger_value = 1;

            // The x-axis stick value, [0,255], Subtract 0x80 to obtain signed values
            int32 stick_xaxis = 2;

            // The y-axis stick value, [0,255], Subtract 0x80 to obtain signed values
            int32 stick_yaxis = 3;
        }
        PSNaviState psnavi_state = 7;

        // PSDualShock4 Specific Controller state
        message PSDualShock4State
        {
            // PSDualShock4 Specific flags
            bool ValidHardwareCalibration= 1;
            bool IsTrackingEnabled= 2;
            bool IsCurrentlyTracking= 3;
            bool IsOrientationValid= 4;
            bool IsPositionValid= 5;

            // Tracking position in the space of the HMD tracking camera
            Position position_cm = 6;

            // Tracking orientation in the frame of the local magnetic field
            Orientation orientation = 7;

            // Thumbsticks
            float left_thumbstick_x = 8;
            float left_thumbstick_y = 9;
            float right_thumbstick_x = 10;
            float right_thumbstick_y = 11;

            // Trigger analog value [0,1]
            float left_trigger_value = 12;
            float right_trigger_value = 13;

            // Only valid if include_raw_sensor_data=true in START_CONTROLLER_DATA_STREAM request
            message RawSensorData
            {
                IntVector accelerometer= 1;
                IntVector gyroscope= 2;
            }
            RawSensorData raw_sensor_data = 14;

            // Only valid if include_calibrated_sensor_data=true in START_CONTROLLER_DATA_STREAM request
            message CalibratedSensorData
            {
                FloatVector accelerometer= 1;
                FloatVector gyroscope= 2;
            }
            CalibratedSensorData calibrated_sensor_data = 15;

            // Only valid if include_raw_tracker_data=true in START_CONTROLLER_DATA_STREAM request
            message RawTrackerData
            {
                int32 tracker_id= 1;
                Pixel screen_location= 2;
                Position relative_position_cm= 3;
                Orientation relative_orientation= 4;
                Ellipse projected_sphere= 5;
                Polygon projected_blob= 6;
                Position multicam_position_cm= 7;
                Orientation multicam_orientation= 8;
                uint32 valid_tracker_bitmask = 9;
            }
            RawTrackerData raw_tracker_data = 16;

            // Only valid if include_physics_data=true in START_CONTROLLER_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity_cm_per_sec= 1;
                FloatVector acceleration_cm_per_sec_sqr= 2;
                FloatVector angular_velocity_rad_per_sec= 3;
                FloatVector angular_acceleration_rad_per_sec_sqr= 4;
            }
            PhysicsData physics_data = 17;
			int32 tracking_color_type = 18;
        }
        PSDualShock4State psdualshock4_state = 8;
        
        // VirtualController Specific Controller state
        message VirtualControllerState
        {
            // Virtual Controller Specific flags
            bool IsTrackingEnabled= 1;
            bool IsCurrentlyTracking= 2;
            bool IsPositionValid= 3;

            // Tracking position in the space of the HMD tracking camera
            Position position_cm = 4;
            
            // USB device VID/PID
            int32 vendorID = 5;
            int32 productID = 6;
            
            // Number of button elements belonging to the device
            int32 numButtons = 7;
                                    
            // Array[numAxes] of values representing the current state of each axis, in the range [0,255]
            repeated int32 axisStates = 8;

            // Only valid if include_raw_tracker_data=true in START_CONTROLLER_DATA_STREAM request
            message RawTrackerData
            {
                int32 tracker_id= 1;
                Pixel screen_location= 2;
                Position relative_position_cm= 3;
                Ellipse projected_sphere= 4;
                Position multicam_position_cm= 5;
                uint32 valid_tracker_bitmask = 6;
            }
            RawTrackerData raw_tracker_data = 9;

            // Only valid if include_physics_data=true in START_CONTROLLER_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity_cm_per_sec= 1;
                FloatVector acceleration_cm_per_sec_sqr= 2;
            }
            PhysicsData physics_data = 10;
			
			int32 tracking_color_type = 11;
        }
        VirtualControllerState virtualcontroller_state = 9;        
    }
    ControllerDataPacket controller_data_packet = 2;

    // Update packet for a tracker
    message TrackerDataPacket
    {
        // The id of tracker this data is for
        int32 tracker_id= 1;

        // Specify the type of controller this data is from
        TrackerType tracker_type= 2;

        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // Common Controller status flags
        bool IsConnected= 4;
    }
    TrackerDataPacket tracker_data_packet = 3;

    // Update packet for an HMD
    message HMDDataPacket
    {
        // The id of hmd this data is for
        int32 hmd_id= 1;

        // Specify the type of HMD this data is from
        HMDType hmd_type= 2;

        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // Common HMD status flags
        bool IsConnected= 4;

        // Morpheus Specific HMD state
        message MorpheusState
        {
            // Morpheus Specific flags
            bool IsTrackingEnabled= 1;
            bool IsCurrentlyTracking= 2;
            bool IsOrientationValid= 3;
            bool IsPositionValid= 4;

            // Tracking position in the space of the HMD tracking camera
            Position position_cm = 5;

            // Tracking orientation in the frame of the HMD tracking camera
            Orientation orientation = 6;

            // Only valid if include_raw_sensor_data=true in START_HMD_DATA_STREAM request
            message RawSensorData
            {
                IntVector accelerometer= 1;
                IntVector gyroscope= 2;
            }
            RawSensorData raw_sensor_data = 7;

            // Only valid if include_calibrated_sensor_data=true in START_HMD_DATA_STREAM request
            message CalibratedSensorData
            {
                FloatVector accelerometer= 1;
                FloatVector gyroscope= 2;
            }
            CalibratedSensorData calibrated_sensor_data = 8;

            // Only valid if include_raw_tracker_data=true in START_HMD_DATA_STREAM request
            message RawTrackerData
            {
                int32 tracker_id= 1;
                Pixel screen_location= 2;
                Position relative_position_cm= 3;
                Orientation relative_orientation= 4;
                Polygon projected_point_cloud= 5;
                uint32 valid_tracker_bitmask = 6;
            }
            RawTrackerData raw_tracker_data = 9;

            // Only valid if include_physics_data=true in START_HMD_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity_cm_per_sec= 1;
                FloatVector acceleration_cm_per_sec_sqr= 2;
                FloatVector angular_velocity_rad_per_sec= 3;
                FloatVector angular_acceleration_rad_per_sec_sqr= 4;
            }
            PhysicsData physics_data = 10;
        }
        MorpheusState morpheus_state = 5;
        
        // Virtual HMD Specific state
        message VirtualHMDState
        {
            // Virtual HMD Specific flags
            bool IsTrackingEnabled= 1;
            bool IsCurrentlyTracking= 2;
            bool IsPositionValid= 3;

            // Tracking position in the space of the HMD tracking camera
            Position position_cm = 4;

            // Only valid if include_raw_tracker_data=true in START_HMD_DATA_STREAM request
            message RawTrackerData
            {
                int32 tracker_id= 1;
                Pixel screen_location= 2;
                Position relative_position_cm= 3;
                Ellipse projected_sphere= 4;
                uint32 valid_tracker_bitmask = 5;
            }
            RawTrackerData raw_tracker_data = 5;

            // Only valid if include_physics_data=true in START_HMD_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity_cm_per_sec= 1;
                FloatVector acceleration_cm_per_sec_sqr= 2;
            }
            PhysicsData physics_data = 6;
        }
        VirtualHMDState virtual_hmd_state = 6;        
    }
    HMDDataPacket hmd_data_packet = 4;
}

// Unreliable (UDP) device data packet sent from clients to service
message DeviceInputDataFrame
{
    // The id of the connection this data frame came from
    int32 connection_id= 1;

    // The device update type
    enum DeviceCategory
    {
        INVALID = 0;
        CONTROLLER= 1;
    }
    DeviceCategory device_category= 2;

    // Input packet for a controller
    message ControllerDataPacket
    {
        // The id of controller this data is for
        int32 controller_id= 1;

        // Specify the type of controller this data is from
        ControllerType controller_type= 2;

        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // PSMove Specific Controller state
        message PSMoveState
        {
            // Analog rumble value [0,255]
            int32 rumble_value = 1;

            // LED override ([0, 255], [0, 255], [0, 255])
            // (0, 0, 0) clears the override and defaults back to tracking color
            int32 led_r = 2;
            int32 led_g = 3;
            int32 led_b = 4;
        }
        PSMoveState psmove_state = 4;

        // PSDualShock4 Specific Controller state
        message PSDualShock4State
        {
            // Analog rumble value [0,255]
            int32 big_rumble_value = 1;
            // Analog rumble value [0,255]
            int32 small_rumble_value = 2;

            // LED override ([0, 255], [0, 255], [0, 255])
            // (0, 0, 0) clears the override and defaults back to tracking color
            int32 led_r = 3;
            int32 led_g = 4;
            int32 led_b = 5;
        }
        PSDualShock4State psdualshock4_state = 5;
    }
    ControllerDataPacket controller_data_packet = 3;
}
